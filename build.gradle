buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath 'org.owasp:dependency-check-gradle:3.+'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath('org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0')
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.unbroken-dome.test-sets'

group 'org.eyalgo'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

mainClassName = 'org.eyalgo.testing.example.logging.ExampleApplication'

testSets {
    integrationTest {
        dirName = 'integration-test'
    }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-data-cassandra'
    )

    runtimeOnly(
            'org.springframework.boot:spring-boot-devtools'
    )

    compileOnly(
            'org.projectlombok:lombok',
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'uk.org.lidalia:slf4j-test:1.1.0'
    )

    testCompile (
            'org.cassandraunit:cassandra-unit:3.5.0.1',
            
    )

    integrationTestCompile(
            'org.cassandraunit:cassandra-unit-spring:3.5.0.1',
            'org.cassandraunit:cassandra-unit-shaded:3.5.0.1',
    )

    annotationProcessor(
            'org.projectlombok:lombok',
    )
}

configurations.integrationTestCompile {
    exclude group: 'uk.org.lidalia'
}

test {
    description "Runs all unit tests"
    include "**/*Test.class"
    maxParallelForks = 4
}

task testIntegration(type: Test) {
    description "Runs all integration tests"
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter 'test'
//  testLogging {
//    showStandardStreams = true
//  }
}
